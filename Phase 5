(gdb) disas phase_5
Dump of assembler code for function phase_5:
=> 0x000000000040106d <+0>:	sub    $0x18,%rsp		//Make stack frame
   0x0000000000401071 <+4>:	mov    %fs:0x28,%rax
   0x000000000040107a <+13>:	mov    %rax,0x8(%rsp)
   0x000000000040107f <+18>:	xor    %eax,%eax
   0x0000000000401081 <+20>:	lea    0x4(%rsp),%rcx
   0x0000000000401086 <+25>:	mov    %rsp,%rdx
   0x0000000000401089 <+28>:	mov    $0x4025af,%esi			//Format of the answer: %d %d
   0x000000000040108e <+33>:	call   0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401093 <+38>:	cmp    $0x1,%eax			//Compare 1 with the value of %eax that is 2.
   0x0000000000401096 <+41>:	jg     0x40109d <phase_5+48>		//if the value of %eax is greater than 1, it will move to line<+48> orelse it will move to explode bomb. 
   0x0000000000401098 <+43>:	call   0x40142a <explode_bomb>
   0x000000000040109d <+48>:	mov    (%rsp),%eax    			//Moving the value of (%rsp) to %eax
   0x00000000004010a0 <+51>:	and    $0xf,%eax			//Operating AND operation between 0xf and %eax
   0x00000000004010a3 <+54>:	mov    %eax,(%rsp)			//moving the value of %eax to (%rsp) 
   0x00000000004010a6 <+57>:	cmp    $0xf,%eax			//Compare %eax with 0xf(which is equal to 15) 
   0x00000000004010a9 <+60>:	je     0x4010da <phase_5+109>		//if 15 is not equal to %eax then it will move to next line.
   0x00000000004010ab <+62>:	mov    $0x0,%ecx 		//%ecx = 0
   0x00000000004010b0 <+67>:	mov    $0x0,%edx		//%edx = 0
   0x00000000004010b5 <+72>:	add    $0x1,%edx		//%edx = 1 + 0 ----> 1
   0x00000000004010b8 <+75>:	cltq   
   0x00000000004010ba <+77>:	mov    0x402460(,%rax,4),%eax	//%eax = value of(0x402460(,%rax,4))
   0x00000000004010c1 <+84>:	add    %eax,%ecx		//%ecx = ecs + eax 
--Type <RET> for more, q to quit, c to continue without paging--
   0x00000000004010c3 <+86>:	cmp    $0xf,%eax		//Compare 0xf with %eax
   0x00000000004010c6 <+89>:	jne    0x4010b5 <phase_5+72>	//If it is not equal then it will jump to line<+72>. It iterates until the value of %eax reaches to 15 only then it will move to next line. 
   0x00000000004010c8 <+91>:	movl   $0xf,(%rsp)		//%rsp = 15.
   0x00000000004010cf <+98>:	cmp    $0xf,%edx		//Compare 0xf with %edx
   0x00000000004010d2 <+101>:	jne    0x4010da <phase_5+109>	//if both value are equal then move to next line, else move to explode bomb.
   0x00000000004010d4 <+103>:	cmp    0x4(%rsp),%ecx		//Compare $rsp+4 with %ecx
   0x00000000004010d8 <+107>:	je     0x4010df <phase_5+114>	//if both values are equal then move to line<+114>
   0x00000000004010da <+109>:	call   0x40142a <explode_bomb>
   0x00000000004010df <+114>:	mov    0x8(%rsp),%rax		//Moving $rsp+8 to %rax
   0x00000000004010e4 <+119>:	xor    %fs:0x28,%rax		//Xoring between 0x28 and %rax
   0x00000000004010ed <+128>:	je     0x4010f4 <phase_5+135>
   0x00000000004010ef <+130>:	call   0x400b00 <__stack_chk_fail@plt>
   0x00000000004010f4 <+135>:	add    $0x18,%rsp
   0x00000000004010f8 <+139>:	ret  
   
We knew that %rsp holds our first input and %rsp+0x4 holds our second input. From above, it seems like the first value should be greater than or equal to 5. So our format for answer is "5 x". Depending on first value, we get second value. So the solution is '5 115'----> This works!!


Summary
This function requires you to go backwards through an array of numbers to crack the code. In memory there is a 16 element array of the numbers 0-15. Based on the first user inputed number, you enter into that indexed element of the array, which then gives you the index of the next element in the array, etc. You continue to bounce through the array. The key is that each time you enter into the next element in the array there is a counter that increments. The two stipulations that you must satisfy to move to the last portion of this phase is that you have incremented the counter to 15 and that the final value when you leave the loop is 0xf (decimal 15). So, I mapped out the array from element 0 to 15 and then worked backwards through it to find the element I needed to start with. Given you ultimately needed to have the element containing 0xf to exit after 15 iterations, I saw that f was at array element index 6. Thus on the 14th iteration if I needed a 6, I would need to be in the 14th index of the array on the 13th iteration, then on index 2 of the 12th iteration. Going back all the way to the first iteration you needed to enter into the array at the 5th index, which is the first interger needed for the user input. After satisfying this first requirement of phase_5 there is a comparison of the second user input to what turns out to be the sum of the numbers in the array you accessed. This number was 115.
     
